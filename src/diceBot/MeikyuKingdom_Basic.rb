# -*- coding: utf-8 -*-
# frozen_string_literal: true

class MeikyuKingdom_Basic < DiceBot
  # ゲームシステムの識別子
  ID = 'MeikyuKingdom_Basic'

  # ゲームシステム名
  NAME = '迷宮キングダム-基本ルールブック'

  # ゲームシステム名の読みがな
  SORT_KEY = 'めいきゆうきんくたむ-きほんるーるぶっく'

  # ダイスボットの使い方
  HELP_MESSAGE = <<INFO_MESSAGE_TEXT
・判定　(nMK+m)
　n個のD6を振って大きい物二つだけみて達成値を算出します。修正mも可能です。
　絶対成功と絶対失敗も自動判定します。
・各種表
　・視察表 RT
　・休憩表(〜BT)：才覚休憩表 TBT／魅力休憩表 CBT／探索休憩表 SBT／武勇休憩表 VBT
　・ハプニング表(〜HT)：才覚ハプニング表 THT／魅力ハプニング表 CHT／探索ハプニング表 SHT／武勇ハプニング表 VHT
　・王国災厄表 KDT  ／王国変動表 KCT
　・痛打表 CAT／致命傷表 FWT／戦闘ファンブル表 CFT
　・道中表 TT／交渉表 NT／感情表 ET／相場表 MPT
　・お宝表１／２／３／４／５ T1T／T2T／T3T／T4T／T5T
　・名前表 NAMEx (xは個数)
　・名前表A NAMEA／名前表B NAMEB／エキゾチック名前表 NAMEEX／ファンタジック名前表 NAMEFA
　・アイテム表（〜IT)：武具 WIT／生活 LIT／回復 RIT／探索 SIT／レア武具 RWIT／レア一般 RUIT
　・地名決定表　　　　PNTx (xは個数)
　・迷宮風景表　　　　MLTx (xは個数)
　・王国名決定表１／２／３／４／５ KNT1／KNT2／KNT3／KNT4
　・単語表１／２／３／４　WORD1／WORD2／WORD3／WORD4
　・殊遭遇表 ST／情報収集表 IG
・D66ダイスあり
INFO_MESSAGE_TEXT

  setPrefixes([
    '\d+MK',
    'RT',
    'TBT', 'CBT', 'SBT', 'VBT',
    'THT', 'CHT', 'SHT', 'VHT',
    'KDT', 'KCT',
    'CAT', 'FWT', 'CFT',
    'TT', 'NT', 'ET', 'MPT',
    'T1T', 'T2T', 'T3T', 'T4T', 'T5T',
    'NAME.*',
    'WIT', 'LIT', 'RIT', 'SIT', 'RWIT', 'RUIT',
    'PNT\d*', 'MLT\d*',
    'KNT\d+', 'WORD\d+',
    'SE', 'IG',
  ])

  def initialize
    super
    @sendMode = 2
    @sortType = 1
    @d66Type = 2
  end

  def changeText(string)
    debug("changeText before string", string)

    string = string.gsub(/(\d+)MK6/i) { "#{Regexp.last_match(1)}R6" }
    string = string.gsub(/(\d+)MK/i) { "#{Regexp.last_match(1)}R6" }

    debug("changeText after string", string)

    return string
  end

  def dice_command_xRn(string, nick_e)
    return mayokin_check(string, nick_e)
  end

  def check_nD6(total, dice_total, dice_list, cmp_op, target)
    result = get2D6Result(total, dice_total, cmp_op, target)
    result += getKiryokuResult(total, dice_list, target)

    return result
  end

  alias check_2D6 check_nD6

  def get2D6Result(total_n, dice_n, signOfInequality, diff)
    return '' unless signOfInequality == :>=

    if dice_n <= 2
      " ＞ 絶対失敗"
    elsif dice_n >= 12
      " ＞ 絶対成功"
    else
      get2D6ResultOnlySuccess(total_n, diff)
    end
  end

  def get2D6ResultOnlySuccess(total_n, diff)
    if total_n >= diff
      " ＞ 成功"
    else
      " ＞ 失敗"
    end
  end

  def getKiryokuResult(total_n, dice_list, diff)
    num_6 = dice_list.count(6)

    if num_6 == 0
      return ""
    elsif num_6 >= 2
      return " ＆ 《気力》#{num_6}点獲得"
    end

    none6_list = dice_list.reject { |i| i == 6 }.sort

    maxDice1 = none6_list.pop.to_i
    maxDice2 = none6_list.pop.to_i
    debug("maxDice1", maxDice1)
    debug("maxDice2", maxDice2)

    debug("total_n", total_n)
    none6Total_n = total_n - 6 + maxDice2
    debug("none6Total_n", none6Total_n)

    none6Dice_n = maxDice1 + maxDice2
    debug("none6Dice_n", none6Dice_n)
    debug("diff", diff)
    none6DiceReuslt = get2D6ResultOnlySuccess(none6Total_n, diff)

    return " ＆ 《気力》1点獲得"
  end

  ####################         迷宮キングダム-基本ルールブック        ########################
  def mayokin_check(string, nick_e)
    debug("mayokin_check string", string)

    output = "1"

    # return output unless /(^|\s)S?((\d+)[rR]6([\+\-\d]*)(([>=]+)(\d+))?)(\s|$)/i =~ string

    m = /^S?((\d+)R6([\+\-\d]*)(([>=]+)(\d+))?)/i.match(string)
    unless m
      return "1"
    end

    string = m[1]
    diceCount = m[2].to_i
    modifyText = m[3]
    signOfInequality = m[5] || ""
    diff = m[6].to_i

    bonus = modifyText ? ArithmeticEvaluator.new.eval(modifyText) : 0

    dice_now = 0
    dice_str = ""
    total_n = 0

    _, dice_str, = roll(diceCount, 6, (sortType & 1))
    dice_list = dice_str.split(',').map(&:to_i)

    dice1 = diceCount >= 2 ? dice_list[diceCount - 2] : 0
    dice2 = diceCount >= 1 ? dice_list[diceCount - 1] : 0
    dice_now = dice1 + dice2
    debug("dice1, dice2, dice_now", dice1, dice2, dice_now)

    total_n = dice_now + bonus
    dice_str = "[#{dice_str}]"

    output = "#{dice_now}#{dice_str}"
    if bonus > 0
      output += "+#{bonus}"
    elsif bonus < 0
      output += bonus.to_s
    end

    if sendMode > 0
      if output =~ /[^\d\[\]]+/
        output = "#{nick_e}: (#{string}) ＞ #{output} ＞ #{total_n}"
      else
        output = "#{nick_e}: (#{string}) ＞ #{total_n}"
      end
    else
      output = "#{nick_e}: (#{string}) ＞ #{total_n}"
    end

    if signOfInequality != "" # 成功度判定処理
      cmp_op = Normalize.comparison_operator(signOfInequality)
      output += check_result(total_n, dice_now, dice_list, 6, cmp_op, diff)
    end

    return output
  end

  ####################         迷宮キングダム-基本ルールブック        ########################

  def rollDiceCommand(command)
    output = ""
    type = ""
    total_n = ""

    case command

    when /^NAMEA/i
      debug("namea passed")
      type = '名前Ａ'
      total_n = d66(2)
      output = mk_name_a_table(total_n)
    when /^NAMEB/i
      type = '名前Ｂ'
      total_n = d66(2)
      output = mk_name_b_table(total_n)
    when /^NAMEEX/i
      type = 'エキゾチック名前'
      total_n = d66(2)
      output = mk_name_ex_table(total_n)
    when /^NAMEFA/i
      type = 'ファンタジック名前'
      total_n = d66(2)
      output = mk_name_fa_table(total_n)

    when /^NAME(\d*)/i
      type = '名前'
      count = getCount(Regexp.last_match(1))
      names = ""
      count.times do |_i|
        name, dice = mk_name_table
        names += "[#{dice}]#{name} "
      end
      output = names
      total_n = count

    when /^PNT(\d*)/i
      type = '地名'
      count = getCount(Regexp.last_match(1))
      output = mk_pn_decide_table(count)
      total_n = count

    when /^MLT(\d*)/i
      type = '地名'
      count = getCount(Regexp.last_match(1))
      output = mk_ls_decide_table(count)
      total_n = count

    when /^RT/i
      type = '視察'
      output, total_n = mk_research_table

      # 休憩表(2D6)
    when /^TBT/i
      type = '才覚休憩'
      output, total_n = mk_talent_break_table
    when /^CBT/i
      type = '魅力休憩'
      output, total_n = mk_charm_break_table
    when /^SBT/i
      type = '探索休憩'
      output, total_n = mk_search_break_table
    when /^VBT/i
      type = '武勇休憩'
      output, total_n = mk_valor_break_table
    when /^FBT/i
      type = 'お祭り休憩'
      output, total_n = mk_festival_break_table
      # ハプニング表(2D6)
    when /^THT/i
      type = '才覚ハプニング'
      output, total_n = mk_talent_happening_table
    when /^CHT/i
      type = '魅力ハプニング'
      output, total_n = mk_charm_happening_table
    when /^SHT/i
      type = '探索ハプニング'
      output, total_n = mk_search_happening_table
    when /^VHT/i
      type = '武勇ハプニング'
      output, total_n = mk_valor_happening_table
      # お宝表
    when /^MPT/i
      type = '相場'
      output, total_n = mk_market_price_table
    when /^T1T/i
      type = 'お宝１'
      output, total_n = mk_treasure1_table
    when /^T2T/i
      type = 'お宝２'
      output, total_n = mk_treasure2_table
    when /^T3T/i
      type = 'お宝３'
      output, total_n = mk_treasure3_table
    when /^T4T/i
      type = 'お宝４'
      output, total_n = mk_treasure4_table
    when /^T5T/i
      type = 'お宝５'
      output, total_n = mk_treasure5_table

      # アイテム表
    when /^RWIT/i
      type = 'レア武具アイテム'
      total_n = d66(1)
      output = mk_rare_weapon_item_table(total_n)
    when /^RUIT/i
      type = 'レア一般アイテム'
      total_n = d66(1)
      output = mk_rare_item_table(total_n)
    when /^WIT/i
      type = '武具アイテム'
      total_n = d66(2)
      output = mk_weapon_item_table(total_n)
    when /^LIT/i
      type = '生活アイテム'
      total_n = d66(2)
      output = mk_life_item_table(total_n)
    when /^RIT/i
      type = '回復アイテム'
      total_n = d66(2)
      output = mk_rest_item_table(total_n)
    when /^SIT/i
      type = '探索アイテム'
      total_n = d66(2)
      output = mk_search_item_table(total_n)

      # その他表
    when /^KDT/i
      type = '王国災厄'
      output, total_n = mk_kingdom_disaster_table
    when /^KCT/i
      type = '王国変動'
      output, total_n = mk_kingdom_change_table
    when /^KMT/i
      type = '王国変動失敗'
      output, total_n = mk_kingdom_mischange_table
    when /^CAT/i
      type = '痛打'
      output, total_n = mk_critical_attack_table
    when /^FWT/i
      type = '致命傷'
      output, total_n = mk_fatal_wounds_table
    when /^CFT/i
      type = '戦闘ファンブル'
      output, total_n = mk_combat_fumble_table
    when /^TT/i
      type = '道中'
      output, total_n = mk_travel_table
    when /^NT/i
      type = '交渉'
      output, total_n = mk_negotiation_table
    when /^ET/i
      type = '感情'
      output, total_n = mk_emotion_table

    when /^KNT(\d+)/i
      type = '王国名'
      count = getCount(Regexp.last_match(1))
      total_n = d66(2)

      case count
      when 1
        output = mk_kingdom_name_1_table(total_n)
      when 2
        output = mk_kingdom_name_2_table(total_n)
      when 3
        output = mk_kingdom_name_3_table(total_n)
      end

    when /^WORD(\d+)/i
      type = '単語'
      count = getCount(Regexp.last_match(1))
      total_n = d66(2)

      case count
      when 1
        output = mk_word_1_table(total_n)
      when 2
        output = mk_word_2_table(total_n)
      when 3
        output = mk_word_3_table(total_n)
      when 4
        output = mk_word_4_table(total_n)
      end

    when /^SE/i
      type = '特殊遭遇'
      output, total_n = mk_special_encounter_table
    when /^IG/i
      type = '情報収集'
      output, total_n = mk_information_gathering_table

    end

    if output != '1'
      output = "#{type}表(#{total_n}) ＞ #{output}"
    end
  end

  def getCount(countText)
    if countText.empty?
      return 1
    end

    return countText.to_i
  end

  # 視察表(2d6)
  def mk_research_table
    get_table_by_2d6([
      "信託が下る。苦難がPCを襲うが、それは救いのための試練である。そのセッションの間、PCが10点以上のダメージをモンスターから受けるたび《民の声》を1点回復する。",
      "長老が迷宮の昔話をしてくれた。この表を使用したPC が判定で失敗したとき、その判定のサイコロを振りなおすことができる。この効果は、そのセッションの間に1回だけ使用できる。",
      "民は怪物の脅威におびえている。この表を使用したPCがモンスターの《HP》を0点にすると、《民の声》を2点回復する。この効果は、そのセッションの間に1回だけ使用できる。",
      "日用品が不足しているという不満を持つ民がいるようだ。そのセッションの間、自国に「革」を5個輸送※するたび《民の声》を1点回復する。",
      "民たちは王国の守りが薄いのではという不安を抱いていた。そのセッションの間、自国に「鉄」を5個輸送※するたび《民の声》を1点回復する。",
      "主婦たちが食糧不足に対する不安を訴えてきた。そのセッションの間、自国に「肉」を5個輸送※するたび《民の声》を1点回復する。",
      "民たちは新しい施設の建設を望んでいる。そのセッションの間、自国に「木」を5個輸送※するたび《民の声》を1点回復する。",
      "武器の備えが乏しいのではないかという不安があるようだ。そのセッションの間、自国に「牙」を5個輸送※するたび《民の声》を1点回復する。",
      "配下にした若者が熱心に未来を語る。この表を使用したPCは《配下》を1人消費して、《特殊配下》を1人増やす。その《特殊配下》に名前をつけ、「生まれ表」でなりたいジョブを決定すること。なりたいジョブに対応した能力値※※を使った判定で、そのセッションの間に自分が絶対成功すると、その《特殊配下》は、そのジョブの逸材になる。",
      "王国は活気に満ちている。この表を使用したPCは《気力》を1点獲得し、もう一度王国フェイズに行動することができる。",
      "民たちはワクワクするような冒険譚を求めている！そのセッションのシナリオの目的に達成していたら、終了フェイズに円卓会議の開始時に、1D6MGが手に入る。",
    ])
  end

  # 才覚休憩表（2d6）
  def mk_talent_break_table
    get_table_by_2d6([
      "寝付けないので、民と噂話に花を咲かせる。すると、経費削減のアイデアが……。［才覚］で難易度9の判定を行う。成功するとそのセッションの≪維持費≫が1d6MG減少できる。",
      "自分の嫌いなものに追い回される夢を見る心寂しくなったところに、仲間が様子を見に来てくれた。宮廷の中からキャラクター1人を選ぶ。そのキャラクターへの≪好意≫が1点上昇する。",
      "好きなものの夢を見る。嗚呼、もっと……もっと……。好きなものを1つ選ぶ。その好きなものに関する幸せそうなシチュエーションを考え、他のプレイヤーやGMに伝える。その夢が、幸せそうだと感じる者がいたら≪気力≫が2点回復する。",
      "さてひと眠りするか……というときに、1人の民が青い顔して震えている。どうやら、国に残した家族のことが心配なようだ。［才覚］で難易度11の判定を行う。成功すると≪民の声≫が2点回復する。",
      "「もう少しだ。頑張ろう」あなたはあらん限りの力をこめて、仲間に呼びかけた。［才覚］で案にド9の判定を行う。成功すると、宮廷のキャラクターは≪気力≫を1点ずつ消費できる。消費した≪気力≫と合計値だけ≪民の声≫が回復する。",
      "配下や仲間たちに指示を出し、休憩中も休む間もなく働く。くたくたになって、あくびをするとはいかがお茶を差し入れてくれた。≪民の声≫が回復する。",
      "地図を前にして、今後の冒険について口角を飛ばす。意見の対立はあったが、あなたの意見が通った。我々に必要なのは英雄的死亡ではなく、卑劣な存在なのだ。宮廷の好きなキャラクター1人を選ぶ。そのキャラクターの自分に対する≪敵意≫を好きなだけ上昇させ、上昇した値だけ≪民の声≫を回復する。",
      "たまには私が料理してみるか……。【お弁当】か【フルコース】の効果を使用して、食事をとることができる。食事をしたら1d6を振る。奇数だったら思いの外美しい出来栄え。≪民の声≫が1点上昇する。偶数だったら腹にはたまるが二度とごめんという出来栄え。宮廷全員のあなたに対する≪敵意≫が1点上昇する。",
      "配下の中でも年若い者たちがあなたの周りに群がり、冒険の話を聞かせてくれとせがむ。≪才覚≫で難易度［現在の≪民の声≫の値＋３］の判定を行う。成功すれば、≪民の声≫が1d6点回復する。失敗すると次の１クォーターは行動できない。",
      "迷宮にとらわれた哀れな人々を見つける。助けたいのはやまやまだが、食料がやや心配だ。［才覚］で難易度９の判定を行う。成功すれば自分の≪配下≫が1d6人増える。",
      "「やはりな……」迷宮は予想通り、一筋縄ではいかないようだ。こんなときこそ、用意していたアレが役に立つ。自分の習得しているスキル１種を選ぶ。そのスキルを喪失して、そのスキルと同じスキルグループのスキル１種を修得してもよい。この効果は永続する。",
    ])
  end

  # 魅力休憩表（2d6）
  def mk_charm_break_table
    get_table_by_2d6([
      "妖精のワイン倉を発見し、酒盛りが始まる。宮廷全員の《気力》＋１。［魅力/9］の判定に失敗すると、酔っぱらったあなたは服を脱ぎ始める。1d6を振る。自分を除く宮廷全員のあなたに対する≪感情値≫が1点上昇し、奇数なら《好意》、偶数なら《敵意》になる。",
      "「……実はわたし……むにゃむにゃ」休憩中、意外な寝言を言ってしまう。自分を除く宮廷全員は自分に対する《好意》と《敵意》を入れ替えることが出来る。また、その属性を自由に変更することができる。",
      "休憩中、冷たい由佳があなたの体温を奪っていく。あなたは無意識のうちにぬくもりを求めて身体を寄せ合う。あなたに《好意》を持っているキャラの数だけ《気力》と《HP》が回復する。",
      "こっそり二人で抜け出して良い雰囲気に。その部屋の中に、好きなものが同じキャラが居ればそのキャラ１体を選び、互いに対する《好意》を１点上昇させることができる。",
      "星の灯りがあなたの顔をロマンチックに照らし出す。その部屋にいる人物の中から好きなキャラ１体を選び、魅力で［９＋そのキャラのあなたに対する《好意》］の判定を行う。成功すると、そのキャラのあなたに対する《好意》が１点上昇。",
      "あいつと目が合う。［魅力］で難易度9の判定を行う。成功したら、自分以外の宮廷の中からランダムにキャラクターを１体選び、そのキャラから自分への《好意》か、または自分のそのキャラへの《好意》いずれかが＋１される。",
      "見張りの途中にうたた寝。目を覚ますと、誰かが毛布を掛けてくれていた。ランダムにキャラを選ぶ。自分のそのキャラへの《好意》のいずれかが1点上昇する。",
      "野営に最適な場所を見つける。たき火を囲みながら会話を楽しむ。GMの左隣にいるプレイヤーから順番に、自分のPCが《好意》を持っているキャラ１体を選ぶ。選ばれたキャラは《気力》＋１。誰からも選ばれなかったキャラは《気力》－１、ランダムに選んだ宮廷内のキャラへの《敵意》＋１。",
      "疲れた体を癒すため、テントの中で楽な衣装に着替えよう。すると、そこに侵入者が……。宮廷内からランダムにキャラクター１体選び、（1d6）を振る。奇数なら大声をだしてしまい宮廷全員のそのキャラに対する《敵意》＋１、偶数ならそのキャラとあなたの互いの《好意》＋１。",
      "部屋の隅に隠れていた怪物が現れた！　すぐには襲い掛かってこないようだが……。魅力で難易度10の判定を行う。成功すれば怪物と友好関係を結ぶことができる。自分のレベル以下のモンスターを1体選び、そのモンスターが配下となる。失敗した場合、宮廷全員の≪HP≫が1d6点減少。",
      "ふとした拍子に唇が触れあう★　好きなキャラ１体を選ぶ。そのキャラの自分以外に対する《好意》の合計を全て自分に対する《好意》に加える。その後、自分以外への《好意》を０にする。",
    ])
  end

  # 探索休憩表（2d6）
  def mk_search_break_table
    get_table_by_2d6([
      "一休みする前に道具の手入れ。使い慣れた道具ほど手になじむ。ランダムに自分の装備しているアイテムを１つ選ぶ。そのアイテムのレベルが１上がる。",
      "寝床を探していたら、アルコーブがあり、その奥に宝箱を見つける。〔探索〕で難易度９の判定を行う。成功すると、好きな素材１種類を選び、（1d6）個手に入れる。",
      "民が寝静まったあと、あなたも一眠り。すると、その夢の中で……。［探索］で難易度１１の判定を行う。成功したら、好きな部屋を指定する、その部屋の脅威情報をGMから教えてもらえる。",
      "配下が眠りにつき、部屋が静寂に包まれると、隣の部屋から妙な音が聞こえる。この部屋に隣接する好きな部屋を1つ選ぶ。〔探索〕で難易度9の判定に成功すると、その部屋にモンスターがいるかどうか、またいるなら、モンスターの種類と数が分かる。",
      "一休みしようと持ったら、モンスターの墓場を発見した。みんなで捜索だ。好きな素材を１種類選び、宮廷全員の中で、あなたに対する《好意》の合計値だけその素材を入手する。",
      "この部屋はなぜか落ち着く。もしもその部屋の中にあなたの好きなものがあれば、《気力》を（1d6）点回復することができる。あなたは、GMにその部屋に自分の好きなものがないか質問してもよい。",
      "壁に書かれた奇妙な壁画が、あなたを見つめている気がする…。〔探索〕で難易度９の判定を行う。成功すると、【エレベータ】を発見する。",
      "白骨化した先客の死体が見つかる。使えそうな装備は、ありがたく頂戴しておこう。〔探索〕で難易度10の判定を行う。コモンアイテムのカテゴリの中から好きなものを１つ選び、その中からランダムに決めたアイテムを１個手に入れる。",
      "星の灯りで地図を眺める…部屋の構造からすると、この辺りに何かあるはずなんだが……。〔探索〕で難易度１０の判定を行う。成功すると、その部屋に仕掛けられたイベント型のトラップを全て発見する。",
      "自然の呼び声。休んでいる間にトイレにいきたくなった……。［探索］で難易度10の判定に成功すると、その部屋に迷宮のほころびを見つける。このセッションの間、この部屋から迷宮の外へ帰還することができる。",
      "こ、これは秘密の扉？〔探索〕で難易度１１の判定を行う。成功すると、この部屋に隣接する好きな部屋に通路を延ばすことができる。",
    ])
  end

  # 武勇休憩表（2d6）
  def mk_valor_break_table
    get_table_by_2d6([
      "時が満ちるにつれ、闘志が高まる。現在の経過ターン数と等しい数だけ《気力》が回復する。",
      "もっと……もっと敵と戦いたい、血に飢えた自分を発見する。〔武勇〕で難易度９の判定を行う。成功すると《気力》が１点、《ＨＰ》が（1d6）点回復する。",
      "部屋の片隅にうち捨てられた亡骸を発見する。このマップの支配者の名前が分かっていれば、宮廷全員はこのマップの支配者への《敵意》を１点上昇させることができる。",
      "部屋の隅に隠れていた怪物が襲いかかってきた。あなたは、とっさに武器を手にし、怪物たちに躍りかかった！〔武勇〕で難易度９の判定を行う。成功すれば怪物を追い払い《民の声》＋１。失敗すると自分の《配下》が（1d6）人減少、《民の声》が１点減少する。",
      "危ない！　短剣がきみの横をかすめる。すると、そこにはあなたに躍りかかろうとしていた毒蛇が。もしかして、アイツのことを誤解していたかも。自分が≪敵意≫を持っているキャラ１体を選び、そのキャラに対する《好意》が2点上昇させる。",
      "少し見ないうちに恐るべき実力を身に着けている。今のうちに潰しておくか……。あなたの中にドス黒い気持ちがわき上がる。名前を知っている好きなキャラ１体を選び、そのキャラへの《敵意》が1円上昇する。",
      "ちょっとした行き違いから軽い口論になる。宮廷内からランダムにキャラ１体を選ぶ。そのキャラとあなたの互いに対する《敵意》が1点上昇する。",
      "ライバルの活躍が気になる。宮廷全員の中で、最も高いあなたに対する《敵意》の値と同じ数だけ《気力》を獲得する。",
      "休むべきときに休まなければ、いざというときに戦えない。他の仲間に任せて、しっかりと体を休めることにする。《ＨＰ》を（2d6）点回復することができる。",
      "この足跡は……もしや？　怪物のいた痕跡を発見する。〔武勇〕で難易度１０の判定を行う。成功すると、このゲームで遭遇する予定のまだ宗類のわかっていないモンスターを１種類、GMから教えてもらえる。",
      "殺気！　あなたは、毛布をはねのけ、戦闘態勢を整えるように指示した。〔特殊遭遇表〕を1回使用し、その後、好きな素材を1d6個獲得する。ランダムにレアアイテム１個を手に入れる。",
    ])
  end

  # 才覚ハプニング表（2d6）
  def mk_talent_happening_table
    get_table_by_2d6([
      "自分に王国を導くことなど可能なのだろうか…。【お酒】を1個消費することができなければ、そのセッションの間、［才覚］が1点減少する。",
      "国王の威信が問われる。2d6を振り、その値が［《民の声》＋宮廷全員の国王に対する《好意》の合計］以上の場合、《民の声》が1d6点減少し、もう一度2d6を振って才覚ハプニング表を適用する。",
      "思考に霧の帳が降りる。「散漫」２の変調を受ける。",
      "重大な裏切りを犯してしまう。あなたに対する《好意》が最も高いキャラを１人選ぶ。そのキャラのあなたに対する《感情値》の《敵意》に反転する。",
      "この人についていっていいのだろうか…？　宮廷全員のあなたに対する《好意》が1点減少する（０未満にはならない）。その結果、誰かの《好意》が０になると《民の声》が１点減少する。",
      "宮廷のスキャンダルが暴露される。宮廷全員のあなたに対する《敵意》のうち最も高いものと同じだけ《民の声》が減少する。",
      "あなたの失策が近隣で噂になる。近隣の国の中からランダムに国を１つ選ぶ。その国との関係が１段階悪化する。",
      "王国の経済に破綻の危機が発見される。〔生活レベル〕で難易度〔９＋現在の経過ターン数〕の判定を行う。失敗すると、維持費が（1d6）ＭＧ上昇する。",
      "この区画一帯の疲労が一層激しくなる。１クォーターが経過する。",
      "逸材の賃上げ要求が始まる。終了フェイズの予算会議の時、［今回使用した逸材の数×１］ＭＧほど維持費が上昇する。",
      "今の自分に自信が持てなくなる。「生まれ表」からランダムにジョブを１つ選び、現在のジョブをそのジョブに変更する。",
    ])
  end

  # 魅力ハプニング表（2d6）
  def mk_charm_happening_table
    get_table_by_2d6([
      "民同士の諍いに心を痛め、頭髪にもダメージが！【お酒】を1戸消費することができなければ、このゲーム中［魅力］が１点減少する。",
      "あなたの何気ない一言が不和の種に…。好きなキャラクター１人を選ぶ。そのキャラに対する宮廷全員の《敵意》が１点上昇。",
      "あなたの美しさに嫉妬した迷宮が、あなたの姿を変える。「呪い」３の変調を受ける。",
      "かわいさ余って憎さ百倍。あなたに対する《好意》が最も高いキャラを１人選ぶ。そのキャラのあなたに対する《感情値》を《敵意》に反転する。",
      "あなたをめぐって不穏な空気……。宮廷全員のあなたに対する「愛情」の《好意》を比べ、上から２人選ぶ。その２人の互いに対する《敵意》が1点上昇する。",
      "いがみ合う宮廷を見て民の士気が減少する。宮廷全員のあなたに対する《敵意》の中で最も高い値と同じだけ自分の《配下》が減少する。",
      "宮廷に嫉妬の嵐が巻き起こる。宮廷の中で、あなたに対して愛情を持つキャラクターの数を数える。このセッションの間、行為判定を行うとき、ダイス目の合計がこの値以下なら絶対失敗となる（２未満にはならない）。",
      "愛想を尽かされる。宮廷全員のあなたに対する《好意》が１点減少する（０未満にはならない）。",
      "あなたの指揮に疑問の声が。〔魅力〕で難易度〔自分の《配下》の値］の判定を行う。失敗すると［難易度－達成値］人だけ《配下》が減少する。",
      "あなたの恋人だという異性が現れる！　宮廷全員のあなたに対する《好意》を比べ、最も高いキャラ１人を選ぶ。あなたはそのキャラの［武勇］の値と同じだけ《ＨＰ》を減少させる。",
      "他人が信用できなくなる。このゲームの間、協調行動を行えなくなる。",
    ])
  end

  # 探索ハプニング表（2d6）
  def mk_search_happening_table
    get_table_by_2d6([
      "指の震えが止まらない。【お酒】を1個消費することができなければ、このセッション中［探索］が１点減少する。",
      "流れ星に直撃。《ＨＰ》が1d6点減少する。",
      "敵の過去を知り、同情してしまう。あなたのこのマップの支配者に対する《好意》が１点上昇する。このセッションの間、《好意》を持ったキャラに対して攻撃を行い、絶対失敗した場合そのキャラへの《好意》と同じだけ《気力》が減少する。",
      "昨日の友は今日の敵。あなたに対する《好意》が最も高いキャラを１人選ぶ。そのキャラに対する《感情値》を《敵意》に反転する。",
      "うっかりアイテムを落として壊してしまう。ランダムにアイテムスロットを１つ選び、そこにアイテムが入っていればそのアイテムを全て破壊する。",
      "カーネルが活性化しトラップが強化される。このセッションの間、トラップを解除するための難易度が１点上昇。",
      "友情にヒビが！宮廷全員のあなたに対する《敵意》が１点上昇する。",
      "敵の疲労攻撃！宮廷全員は［探索］難易度11判定を行う。失敗したキャラは（2d6）点のダメージを受ける。",
      "つい出来心から国費に手を出してしまう。ＧＭは好きなコモンアイテム１つを選ぶ。そのキャラクターはそのアイテムを手に入れるが、維持費＋（1d6）ＭＧ、《民の声》－１。同じ部屋のＰＣは《希望》１点を消費して［探索/９］の判定に成功すれば、それを止めることができる。",
      "封印されていたトラップを発動させてしまう。ランダムに災害系トラップの中から１つを選び、そのトラップを発動する。",
      "あなたを憎む迷宮支配者があなたの首に賞金をかけた。このセッションの間、モンスターの攻撃やトラップの目標をランダムに決める場合、その目標は必ずあなたになる。（この効果を複数人が受けた場合、その中からランダムで決定する）。",
    ])
  end

  # 武勇ハプニング表（2d6）
  def mk_valor_happening_table
    get_table_by_2d6([
      "つい幼児退行を起こしそうになる。【お酒】を1個消費することができなければ、このゲーム中［武勇］が１点減少する。",
      "バカな！　不意打ちか！？　次に行う戦闘は、奇襲扱いとなる。",
      "配下の期待が、あなたの重荷となる。［現在の《民の声》－（1d6）］だけ《気力》が減少する。",
      "「あ、危ないッ！」配下があなたをかばう！　自分の《配下》が（1d6）人減少する。",
      "ムカついたので思わず殴る。自分の《敵意》の中で、最も値が高いキャラをランダムに１体選ぶ。そのキャラの《ＨＰ》が自分の［武勇］と等しい値だけ減少する。",
      "決闘だっ！宮廷全員のあなたに対する《敵意》の中で、最も高い値を選ぶ。その値の分だけあなたの《ＨＰ》が減少し、≪気力≫2点獲得する。",
      "豚どもめ…。宮廷全員に対する《敵意》が１点上昇する。",
      "古傷が痛み出す。このセッションの間、戦闘で、あなたに対する敵の攻撃が成功すると、常に余分に１点余分にダメージを受ける。",
      "不意に絶望と虚無感が襲い、あなたたちの心が折れる。宮廷全員の《気力》が１点減少する。",
      "あなたを親の仇と名乗るものたちが現れた。ランダムにセッション中に倒したモンスターの中から１種類を選ぶ。そのモンスター（1d6）体と戦闘を行う。",
      "自分の失敗が許せない。このゲームの間、《器》が１点減少したものとして扱う。",
    ])
  end

  # 王国災厄表（2d6）
  def mk_kingdom_disaster_table
    get_table_by_2d6([
      "王国の悪い噂が蔓延する。既知の土地にある他国との関係が、すべて1段階悪化する。",
      "自国のモンスターが凶暴化する!自国の《モンスターの民》の中からランダムに１種類のモンスターを選ぶ。自国の《民》を[そのモンスターのレベル]人減少する。また、そのモンスターと同じ種類の《モンスターの民》は、すべて王国からいなくなる。",
      "王国に疫病が大流行……。自国に残した《民》を[自国に残した《民》の数×1/10]人減少する。",
      "自国の疲労が進行する。自国の領土のマップ数と等しい値のMGだけ維持費が上昇する。",
      "敵国のテロリズムが横行!〔治安レベル〕で難易度9の判定を行う。失敗すると、ランダムに選んだ施設1軒が破壊される。",
      "敵国が襲来!あなた方の留守を狙って、敵国が同盟を結んで奇襲を行う。〔軍事レベル〕で難易度9の判定を行う。失敗すると、ランダムに選んだ自国の領土1つ失う。",
      "敵国が陰謀を仕掛けてくる。〔文化レベル〕で難易度9の判定を行う。失敗すると、ランダムに選んだ逸材1人を失う。",
      "食料危機が発生!〔生活レベル〕で難易度9の判定を行う。失敗すると、自国に残した《民》を[自国に残した《民》×1/5]人減少する。王国にある「肉」の素材1個を消費するたびに、《民》の減少を5人軽減することができる。",
      "王国が何者かに呪われる。そのセッションの間、国力を使った行為判定で選んだ2D6の3以下だと、絶対失敗になる。",
      "極地的な迷宮津波が発生。ランダムに自国の領土のマップ1つを選ぶ。そのあと、既知の土地の中からランダムに土地1つを選ぶ。その2つの場所を入れ替える。",
      "敵国の勢力が強大化する。GMは、関係が敵対の国すべてについて、その国の領土に接する好きな土地を1つを選ぶ。その土地をその国の領土にする。",
    ])
  end

  # 王国変動表(2d6)
  def mk_kingdom_change_table
    get_table_by_2d6([
      "列強のプロパガンダが現れる。(1d6)を振り、その目が現在の《民の声》以下で、現在列強の属国になっていたら属国から抜けることができる。上回っていたら、ランダムに列強を１つ選びその属国になる",
      "冒険の成功を祝う民たちが出迎えてくれる。《民の声》＋２。この結果を出したプレイヤー（以下、当ＰＬ）以外の全員は、今回の冒険を振り返り当PLのPCが《好意》を得るとしたら誰が一番ふさわしいかを協議する。決定したキャラへの当PLのPCの《好意》＋１",
      "何者かによる唐突な奇襲攻撃。未知の土地に面している領土からランダムに１つを選ぶ。［軍事レベル/敵対国数×２＋険悪国数＋９］の判定に成功すると返り討ちにして(1d6)ＭＧを得る。失敗するとその領土は施設ごと失われる",
      "民の労働の結果が明らかに。［生活レベル/敵対国数×２＋険悪国数＋９］の判定に成功すると《予算》が自国の領土のマップ数と同じだけ増える。失敗したら《予算》が同じだけ減る",
      "あなたの活躍を耳にした者たちがやってくる。シナリオの目的を満たしている場合、関係が良好・同盟の国の数だけ(1d6)を振り、［合計値＋治安レベル］人だけ《民》が増える",
      "王国の子どもたちが宮廷をあなた方を見て成長する。《民》が［王国に残した《民》の数÷10＋治安レベル］人増える",
      "民は領土を渇望していた。５ＭＧを支払えば、隣接する未知の土地１つを領土にできる。(1d6)を振り、その数だけ通路を引くことができる。通路でつながっていない部屋は自国の領土として扱わない",
      "街の機能に異変が！？［治安レベル/敵対国数×２＋険悪国数＋９］の判定に成功すると、自国の好きな施設１軒を選び、その施設の隣でかつ通路がつながっている部屋に同じ種類の施設がもう１軒できる。失敗したら、自国のタイプ：部屋の施設を１軒選び、破壊する",
      "王国同士の交流が行われた。［文化レベル/敵対国数×２＋険悪国数＋９］の判定に成功すると、生まれ表でランダムにジョブを決めた逸材が１人増え、好きな国１つとの関係を１段階良好にする。失敗すると、自国の逸材１人を選んで失い、ランダムに決めた国１つとの関係が１段階悪化する",
      "ただ、無為に時が過ぎていたわけではない。迷宮フェイズで過ごした１ターンにつき《予算》が１ＭＧ増える",
      "民の意識が大きく揺れる。(1d6)を振り、その目が現在の《民の声》以下だったら、好きな国力が１点上昇する。上回っていたら、好きな国力が１点減少する",
    ])
  end

  # 痛打表（2d6）
  def mk_critical_attack_table
    get_table_by_2d6([
      "あなたの攻撃の手応えが、武器に刻まれる。その攻撃に使用した武具アイテムのレベルが1点上昇する。",
      "電光石火の一撃。攻撃の処理が終了した後、もう一度、行動を行うことができる。",
      "凄まじい一撃は、相手の姿形を変えるほどだ。攻撃の目標に「呪い4」の変調を与える。",
      "乾坤一擲!その攻撃のダメージを算出したあと、それをさらに2倍にすることができる。",
      "凄まじい威力、相手を吹き飛ばす。攻撃目標を好きなエリアに移動させる。",
      "会心の一撃!!ダメージが1D6点上昇する。",
      "敵の勢いを利用し、大ダメージ!ダメージが、攻撃目標のレベルと同じ値だけ上昇する。",
      "あと1歩まで追い詰める。ダメージを与える代わりに、攻撃目標の残り《HP》を1D6点にすることができる。",
      "狙いが的中!敵の技を封じる!攻撃目標のスキル1種を選ぶ。その戦闘の間、そのスキルを喪失させる。",
      "怒りの一撃!ダメージが2D6点上昇する。",
      "敵の急所をとらえ、一撃のもとに斬り伏せる。攻撃目標の《HP》を0点にする。",
    ])
  end

  # 致命傷表（2d6）
  def mk_fatal_wounds_table
    get_table_by_2d6([
      "圧倒的な攻撃が、急所を貫く。死亡する。",
      "致命的な一撃が、頭をかすめる。〔探索〕で難易度[5+受けたダメージ]の判定に成功すると、行動不能になる。判定に失敗すると、死亡する。",
      "昏睡し、体中から血と生命の息吹が失われつつある。行動不能になる。この戦闘が終了するまでに《HP》を1点以上にしないと、そのキャラクターは死亡する。",
      "頭を強くうちつけ、昏睡している。行動不能になる。このクォーターが終了するまでに《HP》が1点以上にしないと、そのキャラクターは死亡する。",
      "重傷を負い、意識を失う。行動不能になる。1D6クォーターが経過するまでに《HP》を1点以上にしないと、そのキャラクターは死亡する。",
      "すさまじい一撃に意識を失う。行動不能になる。",
      "偶然、アイテムが衝撃からキミを護る。装備しているアイテムから、ランダムに1つを選ぶ。そのアイテムを破壊し、ダメージを無効にする。もし破壊できるアイテムが1つも装備していないと行動不能になる。",
      "《民》たちが、その身を犠牲にしてキミを護る。自分の《配下》を2D6人減少し、ダメージを無効にする。もし《配下》が1人もいなければ、行動不能になる。",
      "根性で攻撃を跳ね返す![探索]で、難易度[5+受けるダメージ]の判定を行う。成功すると、《HP》が1点になる。失敗すると、行動不能になる。",
      "精神力だけで耐え忍ぶ。〔武勇〕で、難易度[5+受けるダメージ]の判定を行う。成功すると、《HP》が1点になる。失敗すると、行動不能になる。",
      "幸運なことに、ダメージは避けられる。しかし、ランダムに変調1つを選び、それを受ける。数値がある場合、3なる。",
    ])
  end

  # 戦闘ファンブル表（2d6）
  def mk_combat_fumble_table
    get_table_by_2d6([
      "敵に援軍が現れる!敵軍の中でもっともレベルの低いモンスターが1D6体増える(モンスターがこの結果になった場合、好きなPCの《配下》が１D6体上昇する)。",
      "敵の士気がおおいにゆらぐ。自軍のキャラクター全員は1マス後退する。",
      "勢いあまって仲間に攻撃!自分のいるエリアの中から、ランダムに自軍キャラクター1人を選ぶ。そのキャラクターに使用している武器と同じ威力のダメージを与える。",
      "つい仲間と口論に。自軍の未行動のキャラクターの中からランダムに1人選ぶ。そのキャラクターが行動済みになる。",
      "馬鹿な!魔法の効果が!自軍のキャラクターが使用したスキルやアイテムの効果で、その戦闘の間持続するものが、すべて無効になる。",
      "いててて。自分を傷つけてしまう。自分に1D6点ダメージ。",
      "自分の攻撃の勢いを利用され、相手の反撃を受ける。自分の《HP》を現在の半分の値にする。",
      "おおっと、アイテムを落っことした。自分が装備しているアイテムからランダムに1個を選ぶ。そのアイテムが破壊される。(モンスターの場合、自分に1D6点ダメージ)",
      "激しい戦いに、カーネルが活性化。戦闘系トラップからランダムに1種類を選ぶ。その場に、トラップが配置される。",
      "あなたの攻撃は空を切り、絶望に囚われる。自分と、自分の想い人全員の《気力》1点減少する(モンスターの場合、自分に1D6点ダメージ)。",
      "あっ!武器がすっぽぬけた。攻撃に使用していたアイテムが破壊される(モンスターの場合、自分に1D6点ダメージ)。戦闘シートにいるキャラクターの中からランダムにキャラクター1体を選ぶ。そのキャラクターの《HP》が1点になる。",
    ])
  end

  # 道中表（2d6）
  def mk_travel_table
    get_table_by_2d6([
      "道中の時間が、人間関係に変化をもたらす。全員、好きなキャラ１体を選ぶ。そのキャラに対する《感情値》＋１",
      "ん？　何かの死体が転がっている。好きな素材１種類を選ぶ。宮廷のPC1人はその素材を（1d6）手に入れる",
      "カーネルの異常が発生し、あたりが闇に包まれる。宮廷の中からランダムにPC1人を選ぶ。そのPCが【星の欠片】を持っていたら、それが１個破壊される",
      "迷宮災厄のせいか、道に迷いそうになる。全員［才覚/9］の判定を行う。（1d6-成功したキャラ数）クォーター（最低０）、時間が経過する",
      "陰湿なトラップに引っかかる。全員［探索/9］の判定を行う。失敗したPCは《ＨＰ》が（1d6）点減少する",
      "迷宮は不気味に静まり返っている……特に何も起こらなかった。",
      "モンスターの襲撃を受ける。全員［武勇/9］の判定を行い、失敗したPCは《ＨＰ》が（1d6）点減少する",
      "恐ろしげな咆哮があたりに響き、すぐに静まり返る。全員［魅力/9］の判定を行い、失敗したPCは《配下》が（1d6）人逃走し、自国へ帰る",
      "迷宮災厄が発生！　気がつくと自分たちの王国に戻っていた",
      "を？　何か落ちてるぞ。コモンアイテムをランダムに１個選び、それを入手する",
      "ラッキー♪　１ＭＧ拾う",
    ])
  end

  # 交渉表（2d6）
  def mk_negotiation_table
    get_table_by_2d6([
      "中立的な態度は偽装だった。彼らは油断をついて、不意打ちを行う。奇襲扱いで戦闘を行う",
      "交渉は決裂！　戦闘を行うこと。",
      "交渉は決裂！　戦闘を行うこと。",
      "「生け贄をささげれば話を聞こう」モンスターの中で最もレベルが高いもののレベルと同じだけ《配下》を減少させれば友好的になる。ただし、《民の声》を（1d6）点減少する。《配下》を減らさなければ戦闘を行う",
      "「……お前の趣味、なに？」好きな単語表１個を選びD66を振る。宮廷の中に、その項目を好きなものに指定しているキャラがいれば友好的になる。居なければ戦闘を行う",
      "物欲しそうにこちらを見ている。「肉」の素材をモンスターの数だけ消費するか、【お弁当】、【フルコース】１個を消費すればモンスターは友好的になる。消費しなければ戦闘を行う",
      "怪物たちは値踏みするようにこちらを見ている。維持費を（1d6）ＭＧ上昇させれば友好的になる。上昇させなければ戦闘を行う",
      "「何かいいもんよこせ」モンスターの中で最もレベルが高いもののレベル以上の価格のアイテムを消費すれば友好的になる。レアアイテムは価格を＋１０して扱う。それを渡せなければしなければ戦闘を行う",
      "「面白い話を聞かせろよ」プレイヤー達はモンスター達が興味を引きそうな話をすること。ＧＭはその話を聞いて面白いと思えば、宮廷の代表に［魅力/9］の判定を行わせ、成功すると、友好的になる。しっぱおすると戦闘を行うこと",
      "「俺に勝てたら藩士を聞いて野郎」怪物が一騎打ちを申し込んできた。宮廷の中から代表は、［武勇/9］の判定を行う。判定に成功するとモンスターたちは友好的になる。失敗すると、判定を行ったものがHPを1d6点減少した後、全員で戦闘を行うこと",
      "運命の出会い。一目見た瞬間打ち解け合った。モンスター達の宮廷の代表に対する《好意》１点上昇し、モンスターたち友好的になる",
    ])
  end

  # 感情表（1d6）
  def mk_emotion_table
    get_table_by_1d3([
      "忠誠／怒り",
      "友情／不信",
      "愛情／侮蔑",
    ])
  end

  # 相場表（2d6）
  def mk_market_price_table
    get_table_by_2d6([
      "無し",
      "肉",
      "牙",
      "鉄",
      "魔素",
      "機械",
      "衣料",
      "木",
      "火薬",
      "情報",
      "革",
    ])
  end

  # お宝表１（1d6）
  def mk_treasure1_table
    get_table_by_1d6([
      "何も無し",
      "何も無し",
      "そのモンスターの素材欄の中から、好きな素材１個",
      "そのモンスターの素材欄の中から、好きな素材２個",
      "そのモンスターの素材欄の中から、好きな素材３個",
      "【お弁当】１個",
    ])
  end

  # お宝表２（1d6）
  def mk_treasure2_table
    get_table_by_1d6([
      "そのモンスターの素材欄の中から、好きな素材３個",
      "そのモンスターの素材欄の中から、好きな素材４個",
      "そのモンスターの素材欄の中から、好きな素材５個",
      "ランダムに回復アイテム１個",
      "ランダムに武具アイテム１個。レベルがあるアイテムなら１レベルのものが手に入る",
      "ランダムにレア一般アイテム１個",
    ])
  end

  # お宝表３（1d6）
  def mk_treasure3_table
    get_table_by_1d6([
      "そのモンスターの素材欄の中から、好きな素材５個",
      "そのモンスターの素材欄の中から、好きな素材７個",
      "そのモンスターの素材欄の中から、好きな素材１０個",
      "好きなコモンアイテムのカテゴリ１種を選び、そのカテゴリからランダムにアイテム１個。レベルがあるアイテムなら１レベルのものが手に入る",
      "ランダムにレア一般アイテム１個。レベルがあるアイテムなら１レベルのものが手に入る",
      "ランダムにレア武具アイテム１個",
    ])
  end

  # お宝表４（1d6）
  def mk_treasure4_table
    get_table_by_1d6([
      "そのモンスターの素材欄の中から、好きな素材５個",
      "そのモンスターの素材欄の中から、好きな素材１０個",
      "好きなコモンアイテムのカテゴリ１種を選び、そのカテゴリからランダムにアイテム１個。レベルがあるアイテムなら２レベルのものが手に入る",
      "好きなコモンアイテムのカテゴリ１種を選び、そのカテゴリからランダムにアイテム１個。レベルがあるアイテムなら３レベルのものが手に入る",
      "ランダムにレア一般アイテム１個。レベルのあるアイテムなら２レベルのものが手に入る",
      "ランダムにレア武具アイテム１個。レベルのあるアイテムなら１レベルのものが手に入る",
    ])
  end

  # お宝表５（1d6）
  def mk_treasure5_table
    get_table_by_1d6([
      "そのモンスターの素材欄の中から、好きな素材１０個",
      "そのモンスターの素材欄の中から、好きな素材１５個",
      "好きなコモンアイテムのカテゴリ１種を選び、そのカテゴリからランダムにアイテム１個。レベルがあるアイテムなら４レベルのものが手に入る",
      "ランダムにレア一般アイテム１個。レベルのあるアイテムなら３レベルのものが手に入る",
      "ランダムにレア武具アイテム１個。レベルのあるアイテムなら２レベルのものが手に入る",
      "好きなレアアイテム１個",
    ])
  end

  # 名前表
  def mk_name_table
    debug("mk_name_table begin")
    output = '1'
    # 名前表
    name_n = rand(6) + 1 # rubocop:disable Style/RandomWithOffset
    debug("name_n", name_n)

    d1 = d66(2)
    d2 = d66(2)
    debug("d1, d2", d1, d2)

    debug("name_n", name_n)
    if name_n <= 1
      # 名前表A＋二つ名表A
      output = mk_nick_a_table(mk_name_a_table(d1), d2)
    elsif name_n <= 2
      # 名前表B＋二つ名表A
      output = mk_nick_a_table(mk_name_b_table(d1), d2)
    elsif name_n <= 3
      # 名前表エキゾチック＋二つ名表A
      output = mk_nick_a_table(mk_name_ex_table(d1), d2)
    elsif name_n <= 4
      # 名前表A＋二つ名表B
      output = mk_nick_b_table(mk_name_a_table(d1), d2)
    elsif name_n <= 5
      # 名前表B＋二つ名表B
      output = mk_nick_b_table(mk_name_b_table(d1), d2)
    else
      # 名前表ファンタジー＋二つ名表B
      output = mk_nick_b_table(mk_name_fa_table(d1), d2)
    end

    dice = "#{name_n},#{d1},#{d2}"

    return output, dice
  end

  # 二つ名表A(D66)
  def mk_nick_a_table(output, num)
    table = [
      [11, "“災い転じて福となす”"],
      [12, "“七転び八起きの”"],
      [13, "“冗談にも程がある”"],
      [14, "“虎の尾を踏む”"],
      [15, "“石橋を叩いて渡る”"],
      [16, "“一を聞いて十を知る”"],
      [22, "“喉から手が出る”"],
      [23, "“据え膳食わぬは男の恥の”"],
      [24, "“天につば吐く”"],
      [25, "“風に柳の”"],
      [26, "“目に入れても痛くない”"],
      [33, "“とかく浮世は色と酒の”"],
      [34, "“当たるも八卦、当たらぬも八卦の”"],
      [35, "“泣く子も黙る”"],
      [36, "“天上天下唯我独尊”"],
      [44, "“虫も殺さぬ”"],
      [45, "“花も恥じらう”"],
      [46, "“触らぬ神に祟り無しの”"],
      [55, "“両手に花の”"],
      [56, "“（ゲーム会場の地名）でも一、二を争う”"],
    ]
    if num < 66
      output = get_table_by_number(num, table) + output
    else
      output = "#{output}#{rand(6) + 1}世" # rubocop:disable Style/RandomWithOffset
    end

    return output
  end

  # 二つ名表B(D66)
  def mk_nick_b_table(output, num)
    table = [
      [11, "“身も蓋もない”"],
      [12, "“七人の敵がいる”"],
      [13, "“ドラゴンも裸足で逃げ出す”"],
      [14, "“われらが”"],
      [15, "“機会攻撃を誘発する”"],
      [16, "“佳人薄命”"],
      [22, "“すねに傷持つ”"],
      [23, "“湯上りは親でも惚れる”"],
      [24, "“叶わぬ時の神頼みの”"],
      [25, "“果報は寝て待つ”"],
      [26, "“清濁併せ呑む”"],
      [33, "“かゆいところに手が届く”"],
      [34, "“酒池肉林の”"],
      [35, "“蛇の道は蛇の”"],
      [36, "“口から先に生まれた”"],
      [44, "“柔よく剛を制す”"],
      [45, "“死人に口なしの”"],
      [46, "“噂をすれば”"],
      [55, "“ミスター／ミス”"],
      [56, "“（好きな名前表）の子”"],
      [66, "“（好きな単語表）の父／母”"],
    ]
    return get_table_by_number(num, table) + output
  end

  # 名前表A(D66)
  def mk_name_a_table(num)
    table = [
      [11, "オレンジ／ジャスミン"],
      [12, "ホウズキ／アサガオ"],
      [13, "クローバー／ダチュラ"],
      [14, "ダフニ／キノコ"],
      [15, "クラナーダ／プリムローズ"],
      [16, "ラディッシュ／マリーゴールド"],
      [22, "サイプレス／マグノリア"],
      [23, "バンブー／オリーブ"],
      [24, "クラウド／クリマ"],
      [25, "タオ／スノウ"],
      [26, "アヴァランチ／エクレール"],
      [33, "ビバシータ／メトロノーム"],
      [34, "カノン／ファゴット"],
      [35, "オーボエ／アルモニカ"],
      [36, "チューバ／オルガノ"],
      [44, "ナン／クッキー"],
      [45, "ウイロウ／カシュカシュ"],
      [46, "スコーン／クスクス"],
      [55, "フラスコ／クリップ"],
      [56, "クラバドーラ／クレヨン"],
      [66, "ソープ／プルーム"],
    ]

    return get_table_by_number(num, table)
  end

  # 名前表B(D66)
  def mk_name_b_table(num)
    table = [
      [11, "エイジ／ウェンズデイ"],
      [12, "ジョルノ／ノエル"],
      [13, "タスク／マニャーナ"],
      [14, "ウィンター／ジュノー"],
      [15, "ハイラン／ブランカ"],
      [16, "ウォルナット／ルージュ"],
      [22, "グレイ／スカーレット"],
      [23, "シュバルツ／モエギ"],
      [24, "スロット／キリエ"],
      [25, "ジョーカー／ダイス"],
      [26, "ジグソウ／ドミノ"],
      [33, "バックギャモン／マーブル"],
      [34, "シーガロ／ココア"],
      [35, "スピーチカ／オレンジペコー"],
      [36, "ジッポ／ショコラ"],
      [44, "ナインビンズ／ルチャ"],
      [45, "デカスロン／ラクロス"],
      [46, "カバディ／ピンポン"],
      [55, "ボンド／ヴェルベット"],
      [56, "ルーブル／コットン"],
      [66, "シリング／シルク"],
    ]

    return get_table_by_number(num, table)
  end

  # 名前表エキゾチック(D66)
  def mk_name_ex_table(num)
    table = [
      [11, "モアイ／スイショウドクロ"],
      [12, "チュパカプラ／ムペンペ"],
      [13, "カンフー／インヤン"],
      [14, "ブシドー／ミヤコ"],
      [15, "チャンピオン／バービー"],
      [16, "ウパニシャッド／ゾルゲ"],
      [22, "デスマーチ／インテル"],
      [23, "ゴッホ／ヴィクトリア"],
      [24, "ゾンビ／オニャンコポン"],
      [25, "ケロッパ／カルメン"],
      [26, "オーバーキル／サシミ"],
      [33, "ブッチャー／デヴィ"],
      [34, "ブロンソン／マドンナ"],
      [35, "ガイギャックス／エロイカ"],
      [36, "好きな星の名前"],
      [44, "好きな武器の名前"],
      [45, "好きな動物の名前"],
      [46, "好きな鉱物の名前"],
      [55, "好きな言葉＋ドラゴン"],
      [56, "好きな単語表で決定する"],
      [66, "プレイヤーと同じ名前"],
    ]
    return get_table_by_number(num, table)
  end

  # 名前表ファンタジー(D66)
  def mk_name_fa_table(num)
    table = [
      [11, "アダム／イヴ"],
      [12, "ジャック／モモ"],
      [13, "オズ／アリス"],
      [14, "コナン／レダ"],
      [15, "アーサー／イシス"],
      [16, "エルリック／グローリアーナ"],
      [22, "ギルガメッシュ／アマテラス"],
      [23, "マハラジャ／クリシュナ"],
      [24, "カゲオトコ／クロトカゲ"],
      [25, "オルフェウス／ヴィーナス"],
      [26, "ソロモン／サロメ"],
      [33, "ワタリガラス／ディードリット"],
      [34, "ニャルラトホテプ／バースト"],
      [35, "アンナタール／フォルトゥナ"],
      [36, "ザナドゥ／ヨミ"],
      [44, "アルビオン／ラピュタ"],
      [45, "ゼンダ／ゴーメンガースト"],
      [46, "インスマウス／イース"],
      [55, "フウヌイム／ヤプー"],
      [56, "ザンス／ナルニア"],
      [66, "カレワラ／イーハトープ"],
    ]

    return get_table_by_number(num, table)
  end

  # 武具アイテム表(D66)
  def mk_weapon_item_table(num)
    table = [
      [ 11, 'だんびら' ],
      [ 12, 'だんびら' ],
      [ 13, 'ダガー' ],
      [ 14, '戦斧' ],
      [ 15, '盾' ],
      [ 16, '鑓' ],
      [ 22, '籠手（だんびら）' ],
      [ 23, '手裏剣' ],
      [ 24, '石弓' ],
      [ 25, '甲冑' ],
      [ 26, '戦鎚' ],
      [ 33, '大弓（だんびら）' ],
      [ 34, '爆弾' ],
      [ 35, '鉄砲' ],
      [ 36, '大剣' ],
      [ 44, '拳銃（だんびら）' ],
      [ 45, 'ホウキ' ],
      [ 46, '徹甲弾' ],
      [ 55, 'だんびら' ],
      [ 56, '大砲' ],
      [ 66, 'だんびら' ],
    ]

    return get_table_by_number(num, table)
  end

  # 生活アイテム表(D66)
  def mk_life_item_table(num)
    table = [
      [ 11, 'バックパック' ],
      [ 12, 'バックパック' ],
      [ 13, '鍋' ],
      [ 14, 'クラッカー' ],
      [ 15, 'がまぐち' ],
      [ 16, 'マント' ],
      [ 22, '法衣（バックパック）' ],
      [ 23, 'カード' ],
      [ 24, 'エプロン' ],
      [ 25, '住民台帳' ],
      [ 26, '携帯電話' ],
      [ 33, '召喚鍵（バックパック）' ],
      [ 34, '肖像画' ],
      [ 35, '衣装' ],
      [ 36, '山吹色のお菓子' ],
      [ 44, 'バックパック' ],
      [ 45, '眼鏡' ],
      [ 46, 'クレジットカード' ],
      [ 55, 'バックパック' ],
      [ 56, '魔道書' ],
      [ 66, 'バックパック' ],
    ]

    return get_table_by_number(num, table)
  end

  # 回復アイテム表(D66)
  def mk_rest_item_table(num)
    table = [
      [ 11, 'お弁当' ],
      [ 12, 'お弁当' ],
      [ 13, '特効薬' ],
      [ 14, '保存食' ],
      [ 15, '担架' ],
      [ 16, '珈琲' ],
      [ 22, '軟膏（お弁当）' ],
      [ 23, 'チョコレート' ],
      [ 24, 'お酒' ],
      [ 25, 'フルコース' ],
      [ 26, 'ポーション' ],
      [ 33, 'お弁当' ],
      [ 34, '救急箱' ],
      [ 35, '強壮剤' ],
      [ 36, '迷宮保険' ],
      [ 44, 'お弁当' ],
      [ 45, '科学調味料' ],
      [ 46, '惚れ薬' ],
      [ 55, 'お弁当' ],
      [ 56, '復活薬' ],
      [ 66, 'お弁当' ],
    ]

    return get_table_by_number(num, table)
  end

  # 探索アイテム表(D66)
  def mk_search_item_table(num)
    table = [
      [ 11, '星の欠片' ],
      [ 12, '星の欠片' ],
      [ 13, '旗' ],
      [ 14, 'お守り' ],
      [ 15, '拷問具' ],
      [ 16, 'パワーリスト' ],
      [ 22, '工具（星の欠片）' ],
      [ 23, 'テント' ],
      [ 24, '楽器' ],
      [ 25, '使い魔' ],
      [ 26, '乗騎' ],
      [ 33, '迷宮迷彩（星の欠片）' ],
      [ 34, '罠百科' ],
      [ 35, '迷宮防護服' ],
      [ 36, '地図' ],
      [ 44, '星の欠片' ],
      [ 45, '時計' ],
      [ 46, 'もぐら棒' ],
      [ 55, '星の欠片' ],
      [ 56, 'カボチャの馬車' ],
      [ 66, '星の欠片' ],
    ]

    return get_table_by_number(num, table)
  end

  # レア武具アイテム表(1D6+1D6)
  def mk_rare_weapon_item_table(num)
    table = [
      [ 11, '虚弾' ],
      [ 12, '怪物毒' ],
      [ 13, '小鬼の襟巻' ],
      [ 14, '喇叭銃' ],
      [ 15, '蛍矢' ],
      [ 16, '大盾' ],
      [ 21, 'まわし' ],
      [ 22, '怪物毒' ],
      [ 23, 'しゃべる剣' ],
      [ 24, '小麦粉' ],
      [ 25, '王笏' ],
      [ 26, '服従の鞭' ],
      [ 31, 'ぬいぐるみ' ],
      [ 32, '魔杖' ],
      [ 33, '怪物毒' ],
      [ 34, '星衣' ],
      [ 35, '聖印' ],
      [ 36, '獣の毛皮' ],
      [ 41, '日傘' ],
      [ 42, 'チェインソード' ],
      [ 43, '邪眼' ],
      [ 44, '怪物毒' ],
      [ 45, '徒手空拳' ],
      [ 46, 'バカには見えない鎧' ],
      [ 51, 'ビキニアーマー' ],
      [ 52, '輝く者' ],
      [ 53, '貪る者' ],
      [ 54, '滅ぼす者' ],
      [ 55, '機械の体' ],
      [ 56, '破城槌' ],
      [ 61, '刈り取る者' ],
      [ 62, '貫く者' ],
      [ 63, '黄金の鶴嘴' ],
      [ 64, 'ムラサマ' ],
      [ 65, '蒸気甲冑' ],
      [ 66, '王剣' ],
    ]

    return get_table_by_number(num, table)
  end

  # レア一般アイテム表(1D6+1D6)
  def mk_rare_item_table(num)
    table = [
      [ 11, 'ブルーリボン' ],
      [ 12, '聖痕' ],
      [ 13, '剥製' ],
      [ 14, '愚者の冠' ],
      [ 15, '名刺' ],
      [ 16, '種籾' ],
      [ 21, '香水' ],
      [ 22, '守りの指輪（名刺）' ],
      [ 23, '煙玉' ],
      [ 24, '悪名' ],
      [ 25, '藁人形' ],
      [ 26, 'パワー餌' ],
      [ 31, '王妃の鏡' ],
      [ 32, '蓄音機' ],
      [ 33, '無限の心臓（名刺）' ],
      [ 34, '星籠' ],
      [ 35, '水晶球' ],
      [ 36, '転ばぬ先の杖' ],
      [ 41, '悟りの書' ],
      [ 42, '操りロープ' ],
      [ 43, '盗賊の七つ道具' ],
      [ 44, '携帯算術機（名刺）' ],
      [ 45, '棺桶' ],
      [ 46, 'カメラ' ],
      [ 51, '不思議なたまご' ],
      [ 52, 'ブーケ' ],
      [ 53, '露眼鏡' ],
      [ 54, '災厄王の遺物' ],
      [ 55, '経験値' ],
      [ 56, '鞍' ],
      [ 61, '視肉' ],
      [ 62, '玉璽' ],
      [ 63, '衛星帯' ],
      [ 64, '軍配' ],
      [ 65, '聖杯' ],
      [ 66, '愛' ],
    ]

    return get_table_by_number(num, table)
  end

  # 生まれ表(D66)
  def mk_family_business_table(num)
    table = [
      [ 11, '星術師' ],
      [ 12, '魔道師' ],
      [ 13, '召喚師' ],
      [ 14, '博士' ],
      [ 15, '医者' ],
      [ 16, '貴族' ],
      [ 22, '宦官' ],
      [ 23, '武人' ],
      [ 24, '処刑人' ],
      [ 25, '衛視' ],
      [ 26, '商人' ],
      [ 33, '迷宮職人' ],
      [ 34, '亭主' ],
      [ 35, '料理人' ],
      [ 36, '寿ぎ屋' ],
      [ 44, '働きもの' ],
      [ 45, '狩人' ],
      [ 46, '冒険者' ],
      [ 55, '怠け者' ],
      [ 56, '盗賊' ],
      [ 66, '生まれ表の中から、好きなジョブ1つを選ぶ' ],
    ]

    return "[#{num}]" + get_table_by_number(num, table)
  end

  # 地名決定表
  def mk_pn_decide_table(num)
    output = ''

    d1, = roll(1, 6)
    d2, = roll(1, 6)
    debug("d1", d1)
    debug("d2", d2)

    d1 = (d1 / 2.0).ceil.to_i
    d2 = (d2 / 2.0).ceil.to_i

    num.times do |_i|
      output += "「" + mk_decoration_table(d1) + mk_placename_table(d2) + "」"
    end

    return output
  end

  # 修飾決定表(1D6)
  def mk_decoration_table(num)
    debug("mk_decoration_table num", num)

    table = [
      [ 1, lambda { mk_basic_decoration_table(d66(2)) } ],
      [ 2, lambda { mk_spooky_decoration_table(d66(2)) } ],
      [ 3, lambda { mk_katakana_decoration_table(d66(2)) } ],
    ]
    return get_table_by_number(num, table)
  end

  # 地名決定表(1D6)
  def mk_placename_table(num)
    table = [
      [ 1, lambda { mk_passage_placename_table(d66(2)) } ],
      [ 2, lambda { mk_natural_placename_table(d66(2)) } ],
      [ 3, lambda { mk_artifact_placename_table(d66(2)) } ],
    ]
    return get_table_by_number(num, table)
  end

  # 基本表(D66)
  def mk_basic_decoration_table(num)
    table = [
      [ 11, '欲望（よくぼう）' ],
      [ 12, '漂流（ひょうりゅう）' ],
      [ 13, '黄金（おうごん）' ],
      [ 14, '火達磨（ひだるま）' ],
      [ 15, '災厄（さいやく）' ],
      [ 16, '三日月（みかづき）' ],
      [ 22, '絡繰り（からくり）' ],
      [ 23, '流星（りゅうせい）' ],
      [ 24, '棘々（とげとげ）' ],
      [ 25, '鏡（かがみ）' ],
      [ 26, '銀鱗（ぎんりん）' ],
      [ 33, '螺旋（らせん）' ],
      [ 34, '七色（なないろ）' ],
      [ 35, '殉教（じゅんきょう）' ],
      [ 36, '水晶（すいしょう）' ],
      [ 44, '氷結（ひょうけつ）' ],
      [ 45, '忘却（ぼうきゃく）' ],
      [ 46, '幸福（こうふく）' ],
      [ 55, '妖精（ようせい）' ],
      [ 56, '霧雨（きりさめ）' ],
      [ 66, '夕暮れ（ゆうぐれ）' ],
    ]
    return get_table_by_number(num, table)
  end

  # 不気味表(D66)
  def mk_spooky_decoration_table(num)
    table = [
      [ 11, '赤錆（あかさび）' ],
      [ 12, '串刺し（くしざし）' ],
      [ 13, '鬼蜘蛛（おにぐも）' ],
      [ 14, '蠍（さそり）' ],
      [ 15, '幽霊（ゆうれい）' ],
      [ 16, '髑髏（どくろ）' ],
      [ 22, '血溜まり（ちだまり）' ],
      [ 23, '臓物（ぞうもつ）' ],
      [ 24, '骸（むくろ）' ],
      [ 25, '鉤爪（かぎづめ）' ],
      [ 26, '犬狼（けんろう）' ],
      [ 33, '奈落（ならく）' ],
      [ 34, '大蛇（おろち）' ],
      [ 35, '地獄（じごく）' ],
      [ 36, '蚯蚓（みみず）' ],
      [ 44, '退廃（たいはい）' ],
      [ 45, '土竜（もぐら）' ],
      [ 46, '絶望（ぜつぼう）' ],
      [ 55, '夜泣き（よなき）' ],
      [ 56, '緑林（りょくりん）' ],
      [ 66, 'どん底（どんぞこ）' ],
    ]
    return get_table_by_number(num, table)
  end

  # カタカナ表(D66)
  def mk_katakana_decoration_table(num)
    table = [
      [ 11, 'マヨネーズ' ],
      [ 12, 'ダイナマイト' ],
      [ 13, 'ドラゴン' ],
      [ 14, 'ボヨヨン' ],
      [ 15, 'モケモケ' ],
      [ 16, 'マヌエル' ],
      [ 22, 'ダイス' ],
      [ 23, 'ロマン' ],
      [ 24, 'ウクレレ' ],
      [ 25, 'エップカプ' ],
      [ 26, 'カンパネルラ' ],
      [ 33, 'マンチキン' ],
      [ 34, 'バロック' ],
      [ 35, 'ミサイル' ],
      [ 36, 'ドッキリ' ],
      [ 44, 'ブラック' ],
      [ 45, '好きなモンスターの名前' ],
      [ 46, '好きなトラップの名前' ],
      [ 55, '好きな単語表で' ],
      [ 56, '好きな名前決定表で' ],
      [ 66, '好きな数字の組み合わせ' ],
    ]
    return get_table_by_number(num, table)
  end

  # 通路系地名表(D66)
  def mk_passage_placename_table(num)
    table = [
      [ 11, '門（ゲート）' ],
      [ 12, '回廊（コリドー）' ],
      [ 13, '通り（ストリート）' ],
      [ 14, '小路（アレイ）' ],
      [ 15, '大路（アベニュー）' ],
      [ 16, '街道（ロード）' ],
      [ 22, '鉄道（ライン）' ],
      [ 23, '迷宮（メイズ）' ],
      [ 24, '坑道（トンネル）' ],
      [ 25, '坂（スロープ）' ],
      [ 26, '峠（パス）' ],
      [ 33, '運河（カナル）' ],
      [ 34, '水路（チャネル）' ],
      [ 35, '河（ストリーム）' ],
      [ 36, '堀（モート）' ],
      [ 44, '溝（ダイク）' ],
      [ 45, '階段（ステア）' ],
      [ 46, '辻（トレイル）' ],
      [ 55, '橋（ブリッジ）' ],
      [ 56, '穴（ホール）' ],
      [ 66, '柱廊（ストア）' ],
    ]
    return get_table_by_number(num, table)
  end

  # 自然系地名表(D66)
  def mk_natural_placename_table(num)
    table = [
      [ 11, '砂漠（デザート）' ],
      [ 12, '丘陵（ヒル）' ],
      [ 13, '海（オーシャン）' ],
      [ 14, '森（フォレスト）' ],
      [ 15, '沼（ポンド）' ],
      [ 16, '海岸（コースト）' ],
      [ 22, '密林（ジャングル）' ],
      [ 23, '湖（レイク）' ],
      [ 24, '山脈（マウンテンズ）' ],
      [ 25, '平原（プレイン）' ],
      [ 26, 'ヶ原（ランド）' ],
      [ 33, '荒野（ヒース）' ],
      [ 34, '渓谷（ヴァレー）' ],
      [ 35, '島（アイランド）' ],
      [ 36, '連峰（ピークス）' ],
      [ 44, '火山（ヴォルケイノ）' ],
      [ 45, '湿原（ウェットランド）' ],
      [ 46, '星雲（ネビュラ）' ],
      [ 55, '星（スター）' ],
      [ 56, 'ヶ淵（プール）' ],
      [ 66, '雪原（スノウズ）' ],
    ]
    return get_table_by_number(num, table)
  end

  # 人工系地名表(D66)
  def mk_artifact_placename_table(num)
    table = [
      [ 11, '城（キャッスル）' ],
      [ 12, '壁（ウォール）' ],
      [ 13, '砦（フォート）' ],
      [ 14, '地帯（ゾーン）' ],
      [ 15, '室（ルーム）' ],
      [ 16, 'の間（チャンバー）' ],
      [ 22, '浴室（バス）' ],
      [ 23, '畑（ファーム）' ],
      [ 24, '館（ハウス）' ],
      [ 25, '座（コンスティレィション）' ],
      [ 26, '遺跡（ルイン）' ],
      [ 33, 'ヶ浜（ビーチ）' ],
      [ 34, '塔（タワー）' ],
      [ 35, '墓場（グレイブ）' ],
      [ 36, '洞（ケイヴ）' ],
      [ 44, '堂（バジリカ）' ],
      [ 45, '野（フィールド）' ],
      [ 46, '書院（スタディ）' ],
      [ 55, '駅前（ステイション）' ],
      [ 56, '房（クラスター）' ],
      [ 66, '腐海（ケイオスシー）' ],
    ]
    return get_table_by_number(num, table)
  end

  # 迷宮風景決定表
  def mk_ls_decide_table(num)
    output = ''
    num.times do |_i|
      output += "「" + mk_landscape_table(rand(6) + 1) + "」" # rubocop:disable Style/RandomWithOffset
    end
    return output
  end

  # 迷宮風景表(1D6)
  def mk_landscape_table(num)
    dice = d66(2)
    table = [
      [ 1, lambda { mk_artifact_landscape_table(dice) } ],
      [ 2, lambda { mk_cave_landscape_table(dice) } ],
      [ 3, lambda { mk_natural_landscape_table(dice) } ],
      [ 4, lambda { mk_waterside_landscape_table(dice) } ],
      [ 5, lambda { mk_skyrealm_landscape_table(dice) } ],
      [ 6, lambda { mk_strange_place_landscape_table(dice) } ],
    ]
    return get_table_by_number(num, table)
  end

  # 人工風景表(D66)
  def mk_artifact_landscape_table(num)
    table = [
      [ 11, '石組みの部屋' ],
      [ 12, '巨大な縦穴に刻まれた螺旋階段' ],
      [ 13, '埃だらけの古い図書館' ],
      [ 14, '古びた、素朴な祭壇' ],
      [ 15, '歯車やピストンがやかましい動力室' ],
      [ 16, '石組みの巨大な階段' ],
      [ 22, '太い丸太で組まれた部屋' ],
      [ 23, '作りかけの製品が放置された工房' ],
      [ 24, '錆びた武器や骨が散らばる古戦場' ],
      [ 25, '石組みのトイレ' ],
      [ 26, '高い天井の厨房' ],
      [ 33, 'レンガで組まれた部屋' ],
      [ 34, '静まりかえった劇場' ],
      [ 35, 'がらくたが散らばっているゴミ捨て場' ],
      [ 36, '切り出し途中で放棄された巨大な石像' ],
      [ 44, '壁画やタペストリーが残る大広間' ],
      [ 45, 'メトロ汗国の線路' ],
      [ 46, '絵画や彫刻が展示してあるギャラリー' ],
      [ 55, '石棺が並ぶ墓' ],
      [ 56, '錆びついた扉が残る巨大な門' ],
      [ 66, '放置された牢獄' ],
    ]
    return get_table_by_number(num, table)
  end

  # 洞窟風景表(D66)
  def mk_cave_landscape_table(num)
    table = [
      [ 11, '岩肌がむき出しの洞穴' ],
      [ 12, 'コウモリや羽蟲が飛び交う洞穴' ],
      [ 13, '放置された坑道' ],
      [ 14, '誰かのキャンプ跡' ],
      [ 15, '岩だらけで見通しのきかない空洞' ],
      [ 16, '煙が吹きぬける洞穴' ],
      [ 22, 'どこからか水音が響く鍾乳洞' ],
      [ 23, '光の衰えた星がまたたく幻想的な空洞' ],
      [ 24, '流砂が流れる洞穴' ],
      [ 25, '生物が掘った、つるつるした洞穴' ],
      [ 26, '冷えきった氷の洞穴' ],
      [ 33, '巨大な岩の隙間' ],
      [ 34, '動物や狩を描いた素朴な壁画が続く洞穴' ],
      [ 35, '巨大な空洞にかけられた自然の橋' ],
      [ 36, '埋まりかけで天井すれすれの洞穴' ],
      [ 44, '奈落と断崖絶壁' ],
      [ 45, '壁がうごめく蟲でおおわれた洞穴' ],
      [ 46, '無数の化石が埋まっている洞穴' ],
      [ 55, '熱気を放つ溶岩が流れる空洞' ],
      [ 56, '水晶でできた洞穴' ],
      [ 66, '骨が散らばるなにものかの住処' ],
    ]
    return get_table_by_number(num, table)
  end

  # 自然風景表(D66)
  def mk_natural_landscape_table(num)
    table = [
      [ 11, '苔むした部屋' ],
      [ 12, '動物の声が響き渡る密林' ],
      [ 13, 'つる草でできた通路' ],
      [ 14, '空洞いっぱいのお花畑' ],
      [ 15, '壁から木の根が突き出している部屋' ],
      [ 16, '空洞に広がる耕作地' ],
      [ 22, '折り重なって繁茂する森林' ],
      [ 23, '垂直の空洞にえんえんと伸びる大木の幹' ],
      [ 24, '空洞中に広がるアザラシの営巣地' ],
      [ 25, 'カビで壁がねとつく部屋' ],
      [ 26, 'サボテンが点在する部屋' ],
      [ 33, '巨大キノコの群生地' ],
      [ 34, '真ん中に大木が一本そびえ立っている空洞' ],
      [ 35, '通路いっぱいに進む野生ウマトカゲの大群' ],
      [ 36, '落ち葉がうずたかく積もった部屋' ],
      [ 44, '植え込みで作られた迷宮庭園' ],
      [ 45, '生い茂る竹林' ],
      [ 46, '松ぼっくりが転がる部屋' ],
      [ 55, '丈の長い草が生い茂る部屋' ],
      [ 56, '枯れた森林' ],
      [ 66, '大木の空洞内のような通路や部屋' ],
    ]
    return get_table_by_number(num, table)
  end

  # 水域風景表(D66)
  def mk_waterside_landscape_table(num)
    table = [
      [ 11, '轟々と流れる川にかかった橋' ],
      [ 12, '色とりどりの珊瑚の中' ],
      [ 13, '腰高まで水に浸かった部屋' ],
      [ 14, '澄んだ水が流れる噴水と水飲み場' ],
      [ 15, '沸騰する湖' ],
      [ 16, '地面が干潟化した部屋' ],
      [ 22, '水をたたえた貯水池' ],
      [ 23, '熱い蒸気がたちこめる部屋' ],
      [ 24, '空洞に広がる沼地' ],
      [ 25, '樽や鎖が放置されている船の中' ],
      [ 26, '水槽が並ぶ水族館' ],
      [ 33, '悪臭を放つ下水道' ],
      [ 34, '底に遺跡が見える水没した空洞' ],
      [ 35, '桟橋と船着き場' ],
      [ 36, '筏やハシケが浮かぶ湖' ],
      [ 44, '巨大な縦穴と滝' ],
      [ 45, 'かつて建設された上水道の中' ],
      [ 46, 'ペンギンの右往左往する氷結した湖' ],
      [ 55, '湯気を立てる温泉' ],
      [ 56, '奇怪な彫刻が施された古井戸' ],
      [ 66, '壁に貝やフジツボがはりついた部屋' ],
    ]
    return get_table_by_number(num, table)
  end

  # 天空風景表(D66)
  def mk_skyrealm_landscape_table(num)
    table = [
      [ 11, '雨が降る部屋' ],
      [ 12, 'チーズにうがたれた洞穴' ],
      [ 13, '中空に何層にも重なる空中庭園' ],
      [ 14, '無限に連なる真っ白な洗濯物' ],
      [ 15, '天空に向かって伸びる豆の木' ],
      [ 16, '巨大な縦穴にぶら下がる縄ばしごや鎖' ],
      [ 22, '強風の吹き荒れる部屋' ],
      [ 23, '雲の上。なぜか、その上を歩くことができる' ],
      [ 24, '濃霧に覆われた空洞' ],
      [ 25, '無重量でふわふわ浮く部屋' ],
      [ 26, '雪がしんしんと降り積もる部屋' ],
      [ 33, '時空がねじ曲がった空中回廊' ],
      [ 34, '怪物よけの風車が音を立てる通路' ],
      [ 35, '天井に遺跡が見える空洞' ],
      [ 36, '轟々と音を立てる巨大排気孔' ],
      [ 44, '時折稲妻の走る部屋' ],
      [ 45, '鳥の羽毛が舞い落ちる部屋' ],
      [ 46, '青空が壁面いっぱいに描かれた空洞' ],
      [ 55, '一面、鏡でできた部屋' ],
      [ 56, 'オーロラがゆらめく空洞' ],
      [ 66, '重力方向がばらばらの部屋' ],
    ]
    return get_table_by_number(num, table)
  end

  # 異界風景表(D66)
  def mk_strange_place_landscape_table(num)
    table = [
      [ 11, '古びた六畳間' ],
      [ 12, 'せせこましいカラオケボックス' ],
      [ 13, '時の止まった街' ],
      [ 14, 'ボールが一個転がっている体育館' ],
      [ 15, '毛が生えている部屋' ],
      [ 16, 'なにかの待合室' ],
      [ 22, '生物の粘液したたる体内' ],
      [ 23, 'ブランコやすべり台のある小公園' ],
      [ 24, '安っぽいユニットバス' ],
      [ 25, '上の住人がうるさい部屋' ],
      [ 26, '人骨で組まれている部屋' ],
      [ 33, '呼吸している部屋' ],
      [ 34, '斜めに傾いた部屋' ],
      [ 35, 'ラブホテルの一室' ],
      [ 36, 'ときどきなにかが覗いていく部屋' ],
      [ 44, 'がやがやと話し声が聞こえる部屋' ],
      [ 45, '触手が生えている部屋' ],
      [ 46, '机と椅子が置いてある取調室' ],
      [ 55, '静まりかえった教室' ],
      [ 56, '天井に巨大な人の顔がある部屋' ],
      [ 66, '常に揺れている部屋' ],
    ]
    return get_table_by_number(num, table)
  end

  #################

  # 王国名決定表１(D66)
  def mk_kingdom_name_1_table(num)
    table = [
      [11, "暗黒"],
      [12, "王政"],
      [13, "超"],
      [14, "共和制"],
      [15, "古代"],
      [16, "社会主義"],
      [22, "自由"],
      [23, "新（ネオ）"],
      [24, "神聖（セント、聖）"],
      [25, "正統"],
      [26, "絶対主義"],
      [33, "大"],
      [34, "天階"],
      [35, "深階"],
      [36, "第三"],
      [44, "中央"],
      [45, "帝政"],
      [46, "統一"],
      [55, "独立"],
      [56, "東"],
      [66, "立憲"],
    ]
    return get_table_by_number(num, table)
  end

  # 王国名決定表２(D66)
  def mk_kingdom_name_2_table(num)
    table = [
      [11, "英雄"],
      [12, "連合"],
      [13, "グランドゼロ"],
      [14, "迷宮（ダンジョン）"],
      [15, "災厄"],
      [16, "魔神（デーモン）"],
      [22, "征服"],
      [23, "中華"],
      [24, "ドラゴン（龍）"],
      [25, "猫"],
      [26, "バナナ"],
      [33, "ファンタジー"],
      [34, "冒険"],
      [35, "魔法（マジカル）"],
      [36, "超人"],
      [44, "無敵"],
      [45, "路地裏"],
      [46, "ローマ"],
      [55, "（好きな単語表で決定）"],
      [56, "（プレイ会場の地名　例：ネリマ）"],
      [66, "（国王の名前。後で決定）"],
    ]
    return get_table_by_number(num, table)
  end

  # 王国名決定表３(D66)
  def mk_kingdom_name_3_table(num)
    table = [
      [11, "王国（キングダム）"],
      [12, "王朝"],
      [13, "会社（公社）"],
      [14, "学園（学校）"],
      [15, "合衆国"],
      [16, "共同体"],
      [22, "共和国"],
      [23, "星"],
      [24, "公国"],
      [25, "市（街、シティ、ポリス）"],
      [26, "自治国"],
      [33, "植民地"],
      [34, "帝国"],
      [35, "同盟"],
      [36, "首長国"],
      [44, "幕府"],
      [45, "領"],
      [46, "村"],
      [55, "横丁（亭）"],
      [56, "ランド"],
      [66, "連邦"],
    ]
    return get_table_by_number(num, table)
  end

  # 単語表１(D66)
  def mk_word_1_table(num)
    table = [
      [11, "魔法"],
      [12, "おめかし"],
      [13, "狭いところ"],
      [14, "夜更かし"],
      [15, "節約"],
      [16, "会議"],
      [22, "ヒゲ"],
      [23, "孤独"],
      [24, "自慢話"],
      [25, "自分探し"],
      [26, "異性"],
      [33, "ヒラヒラした服"],
      [34, "平穏な生活"],
      [35, "自分語り"],
      [36, "風呂"],
      [44, "古いもの"],
      [45, "頭が悪い人"],
      [46, "暗闇"],
      [55, "許嫁"],
      [56, "民"],
      [66, "バカ"],
    ]
    return get_table_by_number(num, table)
  end

  # 単語表２(D66)
  def mk_word_2_table(num)
    table = [
      [11, "科学"],
      [12, "読書"],
      [13, "広いところ"],
      [14, "早起き"],
      [15, "ムダ"],
      [16, "仕事"],
      [22, "ハゲ"],
      [23, "みんなで集まること"],
      [24, "ナンパ"],
      [25, "昔話"],
      [26, "同性"],
      [33, "武器の手入れ"],
      [34, "戦争"],
      [35, "人の噂"],
      [36, "散髪"],
      [44, "新しいもの"],
      [45, "頭がよい人"],
      [46, "光"],
      [55, "親"],
      [56, "王様"],
      [66, "ホラ話"],
    ]
    return get_table_by_number(num, table)
  end

  # 単語表３(D66)
  def mk_word_3_table(num)
    table = [
      [11, "子供"],
      [12, "弱い人"],
      [13, "処刑"],
      [14, "叙事詩"],
      [15, "煙草"],
      [16, "病院"],
      [22, "目立つこと"],
      [23, "酒盛り"],
      [24, "料理"],
      [25, "武芸"],
      [26, "田舎"],
      [33, "自分の国"],
      [34, "伝統"],
      [35, "セレモニー"],
      [36, "告げ口"],
      [44, "自分の声"],
      [45, "マヨネーズ"],
      [46, "おせっかい"],
      [55, "外国人"],
      [56, "迷宮"],
      [66, "ねこみみ"],
    ]
    return get_table_by_number(num, table)
  end

  # 単語表４(D66)
  def mk_word_4_table(num)
    table = [
      [11, "年寄り"],
      [12, "強い人"],
      [13, "空想"],
      [14, "冗談"],
      [15, "クスリ"],
      [16, "怪物"],
      [22, "一騎打ち"],
      [23, "賭け事"],
      [24, "歌"],
      [25, "勉強"],
      [26, "都会"],
      [33, "冒険"],
      [34, "ダイナマイト大帝"],
      [35, "悪事"],
      [36, "言い訳"],
      [44, "隣のキャラのジョブ"],
      [45, "小鬼"],
      [46, "謝ること"],
      [55, "異種族"],
      [56, "星"],
      [66, "虫"],
    ]
    return get_table_by_number(num, table)
  end

  def mk_special_encounter_table()
    get_table_by_1d6([
      "宙を舞う【グレムリン】が宮廷の方を物欲しそうに眺めている。宮廷の中で、素材欄に「機械」が含まれているアイテムを持っているPC全員は［才覚］で［７＋装備している素材欄に「機械」が含まれているアイテムの数］D6点ダメージを受ける。",
      "迷宮の壁や床の中に隠れた【群狼】が、キミたちを待ち伏せしていた！【狼牙】にさらされた宮廷全員は[探索]で難易度[５＋宮廷の人数]判定を行う。失敗したPCは自分の＜HP＞が1d6点になる。",
      "部屋を埋め尽くすほどの【小鬼】の群れに遭遇する。【小鬼】たちは瞳を赤くし、我を忘れて襲い掛かってくる。宮廷全員は［武勇］で難易度［５＋宮廷の人数］判定を行う。成功したキャラクターは「牙」の素材を1d6個獲得する。失敗したキャラクターは［1d6＋宮廷の平均レベル］ダメージを受ける。",
      "【鬼婆】の奴隷商人に出会う。鎖につながれた無数の奴隷が、恨めしそうにこちらを見ている。宮廷の代表は、［魅力］で難易度［７＋宮廷の人数］の判定を行う。成功すれば鬼婆から奴隷を購入することができる。≪予算≫１MG消費するたびに1d6人の≪民≫を獲得できる。そのばで自由に宮廷の≪配下≫として編成すること。判定に失敗すると、【鬼婆】は奴隷を差し向け、襲い掛かってくる。宮廷全員は［武勇］で　難易度9の判定を行う。失敗したPCは［1d6＋宮廷の人数］ダメージを受けた上≪配下≫を1d6人失う。",
      "年若い娘が一人倒れている。宮廷の中で誰か彼女を助ける者がいるなら、1d6をふること。その目が奇数なら、彼女は有能な逸材だった。彼女はお礼を言い、王国に仕えさせてくれという。「生まれ表」でランダムに選んだジョブの逸材になる。偶数なら彼女は【メドゥーサ】だった。【石化の視線】が襲い掛かる。彼女を助けようとした者は［才覚］で難易度［７＋宮廷の人数］、残りのPCたちは［５＋宮廷の人数］の判定を行う。失敗した者は1d6点のダメージを受け、「呪い３」の変調を受ける。この判定に宮廷全員が失敗すると、宮廷は全滅する。",
      "災厄京の巡礼者の一団に出会う。彼らは迷宮災厄こそ、おごり高ぶった人類への罰であり、悔い改めよとその教えを説いた。≪配下≫を1人以上連れているキャラクターは［魅力］で難易度［自分の≪配下≫の数＋５］を行う。失敗したPC1人に就き。≪民の声1≫点を失う",
    ])
  end

  def mk_information_gathering_table()
    get_table_by_2d6([
      "調査隊は伝説の財宝の噂を聞きつける。≪配下≫を1d6人消費すると、迷宮マップの中から、ランダムに部屋1つを目標に選ぶことができる。冒険フェイズに目標の探索に成功すると、ランダムに選んだレアアイテムを1個獲得する。",
      "素材のある部屋を見つける。迷宮マップの中から、ランダムに部屋1つを目標に選び、好きな素材を1種類選ぶ。冒険フェイズに目標の探索に成功すると、その素材を［1d6＋宮廷の平均レベル］個獲得する。",
      "うわさに聞いたことのある怪物を発見する。迷宮マップの中から、ランダムに部屋1つを目標に選ぶ。その部屋にレベルが［PCの平均レベル＋５］以下の好きなモンスターを一体、中立的なモンスターとして配置できる。",
      "調査隊は怪物にまつわる情報を入手した。迷宮マップの中から、好きな部屋を2つ目標に選ぶ。目標の脅威情報をGMに教えてもらう。",
      "危険な迷宮を調査隊は進む。≪配下≫を1人消費すると、迷宮マップの中から、好きな部屋を1つ目標に選ぶことができる。目標の脅威情報と通路情報をGMに教えてもらう。目標から他の部屋に通路がつながっていないな藍、PCは行動済みにならず、もう一度指揮判定を行うことができる。",
      "入り口にたどり着く。迷宮マップの中から【入口】のある部屋1つをGMに教えてもらい、その部屋を目標に選ぶ。目標の脅威情報をGMに教えてもらう。その後、≪配下≫を消費することができる。≪配下≫を1d6人消費すると、PCは行動済みにならず、もう一度指揮判定を行うことができる。",
      "調査隊は不慮の事故に巻き込まれる。≪配下≫を1人消費すると、迷宮マップの中から、好きな部屋を1つ目標に選ぶことができる。目標の脅威情報と通路情報をGMに教えてもらう。",
      "調査隊は無事に迷宮にたどり着く。迷宮マップの中から、好きな部屋を1つ目標に選ぶことができる。目標の脅威情報と通路情報をGMに教えてもらう。",
      "難民のいる部屋を発見する。迷宮マップの中から、ランダムに部屋1つを目標に選ぶ。冒険フェイズに目標の探索に成功すると、宮廷の1人は≪配下≫を1d6人獲得する。",
      "調査隊は隠し財産のある部屋に接近した。ランダムに部屋1つを目標に選ぶ。冒険フェイズに目標の探索に成功すると1d6MG を獲得する。",
      "調査隊の素晴らしい活躍！　迷宮マップの中から、好きな部屋を1つ目標に選ぶことができる。目標の脅威情報と通路情報をGMに教えてもらう。さらに、「情報収集表」をもう1回使用できる。",
    ])
  end
end
